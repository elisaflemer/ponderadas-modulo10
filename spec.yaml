openapi: 3.0.0
info:
  title: ToDo Application API
  version: 1.0.0
  description: API for managing users and tasks in a ToDo application with JWT authentication via cookies.

servers:
  - url: http://localhost:5000
    description: Development server

components:
  securitySchemes:
    cookieAuth:   # Define cookie-based authentication
      type: apiKey
      in: cookie
      name: access_token_cookie   # Name of the cookie where JWT is stored
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - name
        - email
        - password
    Task:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        status:
          type: string
        user_id:
          type: integer
      required:
        - title
        - status
        - user_id

paths:
  /user-register:
    get:
      summary: Register page
      responses:
        200:
          description: Returns the registration HTML page.
          content:
            text/html:
              schema:
                type: string

  /user-login:
    get:
      summary: Login page
      responses:
        200:
          description: Returns the login HTML page.
          content:
            text/html:
              schema:
                type: string

  /login:
    post:
      summary: User login and token generation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Login successful and JWT token set in cookie.
          headers:
            Set-Cookie:
              description: Cookie with the JWT token.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        400:
          description: Bad request if username or password are not provided.

  /users:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      summary: Retrieves a user by ID
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Detailed information of a user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found.

    put:
      summary: Update a user's information
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found.

    delete:
      summary: Delete a user by ID
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: User deleted successfully.
        404:
          description: User not found.

  /tasks:
    get:
      summary: Retrieves tasks associated with authenticated user
      security:
        - cookieAuth: []
      responses:
        200:
          description: A list of tasks for the authenticated user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        401:
          description: Unauthorized if JWT is invalid or not provided.

    post:
      summary: Create a new task for the authenticated user
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        200:
          description: Task created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /tasks/{id}:
    get:
      summary: Retrieves a specific task by ID
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Detailed information of a task.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        404:
          description: Task not found or unauthorized access.

    put:
      summary: Update a specific task's details
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        200:
          description: Task updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        404:
          description: Task not found or unauthorized access.

    delete:
      summary: Delete a specific task by ID
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Task deleted successfully.
        404:
          description: Task not found or unauthorized access.

security:
  - cookieAuth: []
