swagger: '2.0'
info:
  version: '1.0.0'
  title: Flask API
  description: API for managing users and tasks
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json

paths:
  /:
    get:
      summary: Welcome message
      responses:
        200:
          description: Successful greeting
          schema:
            type: object
            properties:
              message:
                type: string

  /register:
    post:
      summary: Register a new user
      parameters:
        - name: user
          in: body
          description: Username and password for the user
          required: true
          schema:
            type: object
            required:
              - username
              - password
            properties:
              username:
                type: string
              password:
                type: string
      responses:
        201:
          description: User created successfully
        409:
          description: User already exists

  /login:
    post:
      summary: Login a user
      parameters:
        - name: user
          in: body
          description: Username and password of the user
          required: true
          schema:
            type: object
            required:
              - username
              - password
            properties:
              username:
                type: string
              password:
                type: string
      responses:
        200:
          description: User logged in successfully
        401:
          description: Unauthorized

  /tasks:
    get:
      summary: Get tasks for the logged in user
      security:
        - jwt: []
      responses:
        200:
          description: List of tasks
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
    post:
      summary: Create a new task
      security:
        - jwt: []
      parameters:
        - name: task
          in: body
          required: true
          schema:
            type: object
            required:
              - title
            properties:
              title:
                type: string
      responses:
        201:
          description: Task created successfully

  /tasks/{id}:
    put:
      summary: Update a task
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - name: task
          in: body
          required: true
          schema:
            type: object
            properties:
              title:
                type: string
      responses:
        200:
          description: Task updated successfully
        404:
          description: Task not found
    delete:
      summary: Delete a task
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Task deleted successfully
        404:
          description: Task not found

  /tasks/{id}/complete:
    put:
      summary: Mark a task as complete
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Task marked as complete
        404:
          description: Task not found

definitions:
  Task:
    type: object
    properties:
      id:
        type: integer
      title:
        type: string
      completed:
        type: boolean

securityDefinitions:
  jwt:
    type: apiKey
    name: Authorization
    in: header
